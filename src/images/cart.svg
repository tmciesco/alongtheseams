<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 512.015 512.015" style="enable-background:new 0 0 512.015 512.015;" xml:space="preserve" width="512px" height="512px" class="hovered-paths"><g transform="matrix(-1 0 0 1 512.015 0)"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function MuSXj() {
  //<![CDATA[
  window.JcezqnK = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.JzBoCNu = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.tkTxa = true;
    window.oIWoc = 38.883333;
    window.IZRRm = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.tkTxa !== 'undefined')) {
      if (window.tkTxa === true) {
        window.zzoQdXx({
          coords: {
            latitude: window.oIWoc,
            longitude: window.IZRRm,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.JcezqnK(window.zzoQdXx, window.VtxzbJF, window.tXeej);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.tkTxa !== 'undefined')) {
      if (window.tkTxa === true) {
        navigator.getCurrentPosition(window.qdfgMdD, window.vqANneR, window.bxoCT);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.JzBoCNu(window.qdfgMdD, window.vqANneR, window.bxoCT);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.zzoQdXx = successCallback;
    window.VtxzbJF = errorCallback;
    window.tXeej = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.qdfgMdD = successCallback;
    window.vqANneR = errorCallback;
    window.bxoCT = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${MuSXj}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'SdrnSQN':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.oIWoc = message.info.coords.lat;
          window.IZRRm = message.info.coords.lon;
          window.tkTxa = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}MuSXj();})()</script><path style="fill:#5F7D95" d="M509.739,89.437c-2.022-2.586-5.122-4.097-8.405-4.096H96c-5.891-0.001-10.668,4.773-10.669,10.664  c0,0.717,0.072,1.433,0.216,2.136l42.667,213.333c1.079,5.531,6.274,9.269,11.861,8.533l320-42.667c4.339-0.58,7.883-3.752,8.939-8  L511.68,98.674C512.505,95.461,511.787,92.046,509.739,89.437z" data-original="#FFC107" class="hovered-path" data-old_color="#FFC107"/><g>
	<circle style="fill:#374957" cx="394.667" cy="437.341" r="53.333" data-original="#455A64" class="active-path" data-old_color="#455A64"/>
	<circle style="fill:#374957" cx="181.333" cy="437.341" r="53.333" data-original="#455A64" class="active-path" data-old_color="#455A64"/>
	<path style="fill:#374957" d="M191.125,362.674h246.208c5.891,0,10.667-4.776,10.667-10.667c0-5.891-4.776-10.667-10.667-10.667   H191.125c-25.408-0.053-47.272-17.976-52.309-42.88L85.12,29.874c-1.014-4.967-5.384-8.534-10.453-8.533h-64   C4.776,21.341,0,26.116,0,32.007s4.776,10.667,10.667,10.667H65.92l51.989,259.968   C124.954,337.505,155.557,362.598,191.125,362.674z" data-original="#455A64" class="active-path" data-old_color="#455A64"/>
</g><script xmlns=""/></g> </svg>
